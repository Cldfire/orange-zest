// Generated by https://app.quicktype.io/ with a few hand edits
//
// Turn on derive debug impl and make all properties optional

use serde_derive::{Serialize, Deserialize};

#[derive(Debug, Serialize, Deserialize)]
pub struct Me {
    pub avatar_url: Option<String>,
    pub blocked_tracks_count: Option<i64>,
    pub city: Option<String>,
    pub comments_count: Option<i64>,
    pub consumer_subscriptions: Option<Vec<RSubscription>>,
    pub consumer_subscription: Option<RSubscription>,
    pub created_at: Option<String>,
    pub creator_subscriptions: Option<Vec<RSubscription>>,
    pub creator_subscription: Option<RSubscription>,
    pub default_license: Option<String>,
    pub default_tracks_feedable: Option<bool>,
    pub description: Option<String>,
    pub downloads_disabled: Option<bool>,
    pub downloads_disabled_reason: Option<String>,
    pub first_name: Option<String>,
    pub followers_count: Option<i64>,
    pub followings_count: Option<i64>,
    pub full_name: Option<String>,
    pub gender: Option<String>,
    pub groups_count: Option<i64>,
    pub hidden_tracks_count: Option<i64>,
    pub id: Option<i64>,
    pub kind: Option<String>,
    pub last_modified: Option<String>,
    pub last_name: Option<String>,
    pub likes_count: Option<i64>,
    pub playlist_likes_count: Option<i64>,
    pub locale: Option<String>,
    pub permalink: Option<String>,
    pub permalink_url: Option<String>,
    pub playlist_count: Option<i64>,
    pub primary_email: Option<String>,
    pub primary_email_confirmed: Option<bool>,
    pub private_playlists_count: Option<i64>,
    pub private_tracks_count: Option<i64>,
    pub quota: Option<Quota>,
    pub reposts_count: Option<i64>,
    pub track_count: Option<i64>,
    pub urn: Option<String>,
    pub uri: Option<String>,
    pub username: Option<String>,
    pub verified: Option<bool>,
    pub visuals: Option<Visuals>,
    pub confirmed: Option<bool>,
}

#[derive(Debug, Serialize, Deserialize)]
pub struct RSubscription {
    pub product: Option<Product>,
}

#[derive(Debug, Serialize, Deserialize)]
pub struct Product {
    pub id: Option<String>,
}

#[derive(Debug, Serialize, Deserialize)]
pub struct Quota {
    pub unlimited_upload_quota: Option<bool>,
    pub upload_seconds_used: Option<i64>,
    pub upload_seconds_left: Option<i64>,
    pub upload_tracks_used: Option<i64>,
    pub unlimited_upload_duration_quota: Option<bool>,
    pub unlimited_upload_track_quota: Option<bool>,
}

#[derive(Debug, Serialize, Deserialize)]
pub struct Visuals {
    pub urn: Option<String>,
    pub enabled: Option<bool>,
    pub visuals: Option<Vec<Visual>>,
}

#[derive(Debug, Serialize, Deserialize)]
pub struct Visual {
    pub urn: Option<String>,
    pub entry_time: Option<i64>,
    pub visual_url: Option<String>,
}
