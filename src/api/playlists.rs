// Generated by https://app.quicktype.io/ with a few hand edits
//
// Turn on derive debug impl and make all properties optional

// TODO: a lot of stuff that could use enums to strongly type certain properties
// can't right now because serde doesn't support deserializing to an enum with
// a non-unit variant fallback to capture the value as a string if it doesn't
// match one of the existing unit variants
//
// see https://github.com/serde-rs/serde/pull/1382#issuecomment-424706998

use serde_derive::{Serialize, Deserialize};
use super::common::*;

#[derive(Debug, Serialize, Deserialize)]
pub struct Playlist {
    pub duration: Option<i64>,
    pub permalink_url: Option<String>,
    pub reposts_count: Option<i64>,
    pub genre: Option<String>,
    pub permalink: Option<String>,
    pub purchase_url: Option<String>,
    pub description: Option<String>,
    pub uri: Option<String>,
    pub label_name: Option<String>,
    pub tag_list: Option<String>,
    pub set_type: Option<String>,
    pub public: Option<bool>,
    pub track_count: Option<i64>,
    pub user_id: Option<i64>,
    pub last_modified: Option<String>,
    pub license: Option<String>,
    pub tracks: Option<Vec<Track>>,
    pub id: Option<i64>,
    pub release_date: Option<String>,
    pub display_date: Option<String>,
    pub sharing: Option<String>,
    pub secret_token: Option<String>,
    pub created_at: Option<String>,
    pub likes_count: Option<i64>,
    pub kind: Option<String>,
    pub title: Option<String>,
    pub purchase_title: Option<String>,
    pub managed_by_feeds: Option<bool>,
    pub artwork_url: Option<String>,
    pub is_album: Option<bool>,
    pub user: Option<User>,
    pub published_at: Option<String>,
    pub embeddable_by: Option<String>,
}

// This stuff and below is for the json that specifies playlists to grab info
// for
//
// Their API stuffs a bunch of extra data in here for some reason
#[derive(Debug, Serialize, Deserialize)]
pub struct PlaylistsRaw {
    pub collection: Option<Vec<PlaylistCollection>>,
    pub next_href: Option<String>,
}

#[derive(Debug, Serialize, Deserialize)]
pub struct PlaylistCollection {
    pub playlist: Option<PlaylistShort>,
    pub created_at: Option<String>,
    pub user: Option<User>,
    pub uuid: Option<String>,
}

#[derive(Debug, Serialize, Deserialize)]
pub struct PlaylistShort {
    pub managed_by_feeds: Option<bool>,
    pub kind: Option<Type>,
    pub set_type: Option<SetType>,
    pub created_at: Option<String>,
    pub sharing: Option<Sharing>,
    pub title: Option<String>,
    pub track_count: Option<i64>,
    pub uri: Option<String>,
    pub secret_token: Option<String>,
    pub duration: Option<i64>,
    pub likes_count: Option<i64>,
    pub artwork_url: Option<String>,
    pub public: Option<bool>,
    pub display_date: Option<String>,
    pub user_id: Option<i64>,
    pub is_album: Option<bool>,
    pub id: Option<i64>,
    pub reposts_count: Option<i64>,
    pub permalink: Option<String>,
    pub permalink_url: Option<String>,
    pub published_at: Option<String>,
    pub last_modified: Option<String>,
    pub user: Option<User>,
}

#[derive(Debug, Serialize, Deserialize)]
pub enum Type {
    #[serde(rename = "playlist")]
    Playlist,
    #[serde(rename = "playlist-like")]
    PlaylistLike,
}

#[derive(Debug, Serialize, Deserialize)]
pub enum SetType {
    #[serde(rename = "album")]
    Album,
    #[serde(rename = "")]
    Empty,
    #[serde(rename = "ep")]
    Ep,
    #[serde(rename = "single")]
    Single,
}

#[derive(Debug, Serialize, Deserialize)]
pub enum Sharing {
    #[serde(rename = "private")]
    Private,
    #[serde(rename = "public")]
    Public,
}
